#include <Arduino.h>
// #include <micro_ros_arduino.h>
#include <micro_ros_platformio.h>
#include <ESP32Servo.h>
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <std_msgs/msg/int32.h>

#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){rclErrorLoop();}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){}}
#define EXECUTE_EVERY_N_MS(MS, X) do { \
  static volatile int64_t init = -1; \
  if (init == -1) { init = uxr_millis();} \
  if (uxr_millis() - init > MS) { X; init = uxr_millis();} \
} while (0)

Servo myservo[3]; // Create an array of Servo objects
int servoPin[3] = {15,14,13};
int pos = 0;

bool servoActionCompleted = true;
int lastAutoPlantValue = 0;

// ROS 2 entities
rcl_publisher_t status_publisher;
rcl_subscription_t auto_plant_subscriber;
std_msgs__msg__Int32 status_msg;
std_msgs__msg__Int32 auto_plant_msg;

rclc_executor_t executor;
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_timer_t control_timer;
rcl_init_options_t init_options;

unsigned long long time_offset = 0;
unsigned long prev_cmd_time = 0;
unsigned long prev_odom_update = 0;
unsigned long current_time = 0;
static unsigned long last_pub = 0;
static int disconnect_count = 0;

enum states {
  WAITING_AGENT,
  AGENT_AVAILABLE,
  AGENT_CONNECTED,
  AGENT_DISCONNECTED
} state;

void rclErrorLoop();
void syncTime();
bool createEntities();
bool destroyEntities();
void flashLED(unsigned int);
struct timespec getTime();
void publishData();
void moveServos();
void cover_the_soil();
void plantStep_funtion();
void loadServos_function();
void timer_callback(rcl_timer_t *, int64_t);
void controlCallback(rcl_timer_t *timer, int64_t last_call_time);

void setup() {
  Serial.begin(115200);
  while (!Serial);  // Wait until the serial is connected
  Serial.println("Starting ESP32 Servo Controller");
  
  set_microros_serial_transports(Serial);
  Serial.println("MicroROS transports set");
  myservo[0].attach(servoPin[0], 400, 2400);
  myservo[1].attach(servoPin[1], 400, 2400);
  myservo[2].attach(servoPin[2], 400, 2400);
  // Allow allocation of all timers
}

void loop() {
  static unsigned long last_debug = 0;
  if (millis() - last_debug > 1000) {
    Serial.printf("Current state: %d, Servo action completed: %s\n", 
                 state, 
                 servoActionCompleted ? "true" : "false");
    last_debug = millis();
  }
  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
  
  switch (state) {
    case WAITING_AGENT:
      EXECUTE_EVERY_N_MS(1000, state = (RMW_RET_OK == rmw_uros_ping_agent(500, 5)) ? AGENT_AVAILABLE : WAITING_AGENT;);
      break;
    case AGENT_AVAILABLE:
      state = (true == createEntities()) ? AGENT_CONNECTED : WAITING_AGENT;
      if (state == WAITING_AGENT) {
        destroyEntities();
      }
      break;
    case AGENT_CONNECTED:
      EXECUTE_EVERY_N_MS(500, state = (RMW_RET_OK == rmw_uros_ping_agent(500, 5)) ? AGENT_CONNECTED : AGENT_DISCONNECTED;);
      if (state == AGENT_CONNECTED) {
        rclc_executor_spin_some(&executor, RCL_MS_TO_NS(300));
      }
      break;
    case AGENT_DISCONNECTED:
      destroyEntities();
      state = WAITING_AGENT;
      break;
    default:
      break;
  }
}

void auto_plant_callback(const void *msgin) {
  const std_msgs__msg__Int32 *msg = (const std_msgs__msg__Int32 *)msgin;
  
  Serial.printf("Received auto_plant message: %d\n", msg->data);
  
  if (msg->data == 1) {
    if (servoActionCompleted) {
      servoActionCompleted = false;
      // moveServos();
      plantStep_funtion();
      // loadServos_function();
      servoActionCompleted = true;
    } else {
      Serial.println("Servo is busy, skipping this command");
    }
  }
  lastAutoPlantValue = msg->data;
}

int number_seed[10] = {0,1,2,3,4,5,6,7,8,9};
int load_index = 0;
double pos_seed = 20.0;

void loadServos_function() {
    if (load_index < 10) {
        double start_pos = (load_index == 0) ? 0 : number_seed[load_index-1] * pos_seed;
        double end_pos = number_seed[load_index] * pos_seed;

        for (double pos = start_pos; pos <= end_pos; pos += 1) {
            myservo[0].write(pos);
            delay(20);  // ให้ servo ตามทัน
        }
        load_index++;
    } else {
        load_index = 0;
    }
}


double angle[] = {0,20,90};
void plantStep_funtion() {
    for (double pos = angle[0]; pos <= angle[1]; pos += 1) {
        myservo[1].write(pos);
        delay(15);
    }
    delay(1000);
    //cartesian process x y forward
    for (double pos = angle[0]; pos <= angle[2]; pos += 1) {
        myservo[2].write(pos);
        delay(15);
    }
    delay(2000);
    //cartesian process y down up
    for (pos = angle[2]; pos >= angle[0]; pos -= 1) {
        myservo[2].write(pos);
        delay(15);
    }
    for (pos = angle[1]; pos >= angle[0]; pos -= 1) {
        myservo[1].write(pos);
        delay(15);
    }
    delay(5000);
    //cartesian process y down
    //กลบดิน
    cover_the_soil();
    //cartesian process y up
    //cartesian process x y backward
}
void cover_the_soil(){
    for (double pos = angle[0]; pos <= angle[1]; pos += 1) {
        myservo[1].write(pos);
        delay(30);
    }
    delay(3000);
    for (pos = angle[1]; pos >= angle[0]; pos -= 1) {
        myservo[1].write(pos);
        delay(30);
    }
}
//test servo function 
void moveServos() {
  for (pos = 0; pos <= 180; pos += 1) {
    myservo[0].write(pos);
    myservo[1].write(pos);
    delay(15);
  }
  for (pos = 180; pos >= 0; pos -= 1) {
    myservo[0].write(pos);
    myservo[1].write(pos);
    delay(15);
  }
}

bool createEntities() {
  allocator = rcl_get_default_allocator();
  
  init_options = rcl_get_zero_initialized_init_options();
  rcl_init_options_init(&init_options, allocator);
  rcl_init_options_set_domain_id(&init_options, 10);
  
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
  RCCHECK(rclc_node_init_default(&node, "esp32_servo_controller", "", &support));

  RCCHECK(rclc_publisher_init_best_effort(&status_publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "/servo_status"));
  RCCHECK(rclc_subscription_init_default(&auto_plant_subscriber, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "/auto_plant"));

  const unsigned int control_timeout = 70;
  RCCHECK(rclc_timer_init_default(&control_timer, &support, RCL_MS_TO_NS(control_timeout), controlCallback));

  executor = rclc_executor_get_zero_initialized_executor();
  RCCHECK(rclc_executor_init(&executor, &support.context, 3, &allocator));
  
  RCCHECK(rclc_executor_add_subscription(&executor, &auto_plant_subscriber, &auto_plant_msg, &auto_plant_callback, ON_NEW_DATA));
  RCCHECK(rclc_executor_add_timer(&executor, &control_timer));

  syncTime();
  
  return true;
}

bool destroyEntities() {
  rmw_context_t *rmw_context = rcl_context_get_rmw_context(&support.context);
  (void)rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);

  rcl_publisher_fini(&status_publisher, &node);
  rcl_subscription_fini(&auto_plant_subscriber, &node);
  rcl_node_fini(&node);
  rcl_timer_fini(&control_timer);
  rclc_executor_fini(&executor);
  rclc_support_fini(&support);
  
  return true;
}

void publishData() {
  status_msg.data = servoActionCompleted ? 1 : 0; // 1 = ready, 0 = busy
  rcl_publish(&status_publisher, &status_msg, NULL);
}

void controlCallback(rcl_timer_t *timer, int64_t last_call_time) {
  RCLC_UNUSED(last_call_time);
  if (timer != NULL) {
    publishData();
  }
}

void syncTime() {
  unsigned long now = millis();
  RCCHECK(rmw_uros_sync_session(10));
  unsigned long long ros_time_ms = rmw_uros_epoch_millis();
  time_offset = ros_time_ms - now;
}

struct timespec getTime() {
  struct timespec tp = {0};
  unsigned long long now = millis() + time_offset;
  tp.tv_sec = now / 1000;
  tp.tv_nsec = (now % 1000) * 1000000;
  return tp;
}

void rclErrorLoop() {
  while (true) {
    flashLED(3);
  }
}

void flashLED(unsigned int n_times) {
  delay(1000);
}
